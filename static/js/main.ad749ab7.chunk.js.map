{"version":3,"sources":["dogApi.ts","redux/imagesSlice.ts","redux/appSlice.ts","redux/store.ts","components/Card/index.tsx","components/App/index.tsx","index.tsx","components/App/index.module.scss","components/Card/index.module.scss"],"names":["axiosInstance","axios","create","baseURL","timeout","dogApi","count","get","response","data","fetchData","createAsyncThunk","arg","a","imagesSlice","createSlice","name","initialState","error","status","reducers","extraReducers","builder","addCase","pending","state","rejected","message","fulfilled","payload","forEach","src","nanoid","appSlice","onlyFavorites","favorites","deleted","toggleFavorites","toggleLike","index","indexOf","push","splice","length","deleteItem","filter","id","actions","store","configureStore","reducer","images","imageReducer","app","appReducer","useAppSelector","useSelector","Card","React","memo","liked","className","styles","main","loading","alt","image","Content","Button","Group","fluid","animated","onClick","color","hidden","visible","Icon","App","dispatch","useDispatch","deleteHandler","useCallback","likeHandler","filteredItems","useMemo","Object","entries","key","includes","disabled","button","stackable","doubling","centered","map","Dimmer","inverted","active","Loader","size","Container","textAlign","as","text","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6MAEMA,E,OAAgBC,EAAMC,OAAO,CAC/BC,QAAS,0CACTC,QAAS,MAYAC,EAAkB,WACe,IAAD,sIAApBC,EAAoB,+BAAJ,GAAI,kBAEVN,EAAcO,IAAd,UAAqBD,IAFX,cAE3BE,EAF2B,yBAG1BA,EAASC,MAHiB,uG,QCDhCC,EAAYC,YACrB,wBADqC,uCAErC,WAAOC,GAAP,SAAAC,EAAA,sEACiBR,EAAqBO,GADtC,mFAFqC,uDA2B1BE,EArBYC,YAAY,CACnCC,KAAM,cACNC,aAd+B,CAC/BC,MAAO,KACPC,OAAQ,KACRV,KAAM,IAYNW,SAAU,GACVC,cAAe,SAACC,GACZA,EACKC,QAAQb,EAAUc,SAAU,SAACC,GAC9BA,EAAMN,OAAS,aAEdI,QAAQb,EAAUgB,UAAU,SAACD,EAAD,GAAqB,IAAZP,EAAW,EAAXA,MAClCO,EAAMN,OAAS,WACfM,EAAMP,MAAQA,EAAMS,SAAW,6BAElCJ,QAAQb,EAAUkB,WAAW,SAACH,EAAD,GAAuB,IAAdI,EAAa,EAAbA,QACnCJ,EAAMN,OAAS,YACfU,EAAQF,QAAQG,SAAQ,SAAAC,GAAG,OAAIN,EAAMhB,KAAKuB,eAAYD,KACtDN,EAAMP,MAAQ,WAK9B,QC7Bae,EAAWlB,YAAY,CAChCC,KAAM,WACNC,aAR6B,CAC7BiB,eAAe,EACfC,UAAW,GACXC,QAAS,IAMThB,SAAU,CACNiB,gBADM,SACWZ,GACbA,EAAMS,eAAiBT,EAAMS,eAEjCI,WAJM,SAIMb,EAJN,GAIgD,IAAlCI,EAAiC,EAAjCA,QACVU,EAAQd,EAAMU,UAAUK,QAAQX,IACvB,IAAXU,EACAd,EAAMU,UAAUM,KAAKZ,IAGrBJ,EAAMU,UAAUO,OAAOH,EAAO,GACzBd,EAAMU,UAAUQ,SACjBlB,EAAMS,eAAgB,KAIlCU,WAhBM,cAgB+D,IAAxDT,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,QAAWP,EAAiC,EAAjCA,QAC/BO,EAAQK,KAAKZ,GACbM,EAAYA,EAAUU,QAAO,SAAAC,GAAE,OAAIA,IAAOjB,SAK/C,EAAkDI,EAASc,QAApDH,EAAP,EAAOA,WAAYP,EAAnB,EAAmBA,gBAAiBC,EAApC,EAAoCA,WAC5BL,IAAf,QCpCae,EAAQC,YAAe,CAClCC,QAAS,CACPC,OAAQC,EACRC,IAAKC,KAKIC,EAAkDC,I,2EC4BhDC,EA7BgBC,IAAMC,MAAK,YAA+C,IAA7C5B,EAA4C,EAA5CA,IAAKO,EAAuC,EAAvCA,WAAYM,EAA2B,EAA3BA,WAAYgB,EAAe,EAAfA,MAAOd,EAAQ,EAARA,GAC5E,OACI,eAAC,IAAD,CAAQe,UAAWC,IAAOC,KAA1B,UACI,qBACIhC,IAAKA,EACLiC,QAAS,OACTC,IAAK,aACLJ,UAAWC,IAAOI,QAEtB,cAAC,IAAOC,QAAR,UACI,eAACC,EAAA,EAAOC,MAAR,CAAcC,OAAK,EAAnB,UACI,eAACF,EAAA,EAAD,CAAQG,SAAS,WAAWC,QAAS,kBAAMlC,EAAWQ,IAAK2B,MAAOb,EAAQ,OAAS,OAAnF,UACI,cAACQ,EAAA,EAAOD,QAAR,CAAgBO,QAAM,EAAtB,kBACA,cAACN,EAAA,EAAOD,QAAR,CAAgBQ,SAAO,EAAvB,SACI,cAACC,EAAA,EAAD,CAAM5D,KAAK,cAGnB,eAACoD,EAAA,EAAD,CAAQG,SAAS,WAAWC,QAAS,kBAAM5B,EAAWE,IAAtD,UACI,cAACsB,EAAA,EAAOD,QAAR,CAAgBO,QAAM,EAAtB,oBACA,cAACN,EAAA,EAAOD,QAAR,CAAgBQ,SAAO,EAAvB,SACI,cAACC,EAAA,EAAD,CAAM5D,KAAK,oC,2BCgCxB6D,EAxDH,WACR,IAAMC,EFG0BC,cEFhC,EAA8BxB,GAAe,SAAC9B,GAAD,OAAWA,EAAM0B,UAAvDhC,EAAP,EAAOA,OAAQV,EAAf,EAAeA,KAAMS,EAArB,EAAqBA,MACrB,EAA4CqC,GAAe,SAAA9B,GAAK,OAAIA,EAAM4B,OAAnElB,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,QAASF,EAA3B,EAA2BA,cACrB8C,EAAgBC,uBAAY,SAACnC,GAAD,OAAgBgC,EAASlC,EAAWE,MAAM,CAACgC,IACvEI,EAAcD,uBAAY,SAACnC,GAAD,OAAgBgC,EAASxC,EAAWQ,MAAM,CAACgC,IACrEK,EAAgBC,mBAAQ,kBAAMC,OAAOC,QAAQ7E,GAC9CoC,QAAO,gBAAE0C,EAAF,2BAAYnD,EAAQoD,SAASD,MAAUrD,GAAiBC,EAAUqD,SAASD,SACnF,CAAC9E,EAAM0B,EAAWC,EAASF,IAE/B,OACI,sBAAK2B,UAAWC,IAAOC,KAAvB,UAEmB,cAAX5C,GACA,qCACI,cAACiD,EAAA,EAAD,CACIqB,UAAWtD,EAAUQ,OACrBkB,UAAWC,IAAO4B,OAClBjB,MAAOvC,EAAgB,OAAQ,OAC/BsC,QAAS,kBAAMM,EAASzC,MAJ5B,SAMQH,EAAgB,YAAc,QAGtC,cAAC,IAAOmC,MAAR,CAAcsB,WAAS,EAACC,UAAQ,EAACC,UAAQ,EAAzC,SAEQV,EAAcW,KAAI,mCAAEP,EAAF,KAAOxD,EAAP,YACd,cAAC,EAAD,CACIe,GAAIyC,EAEJxD,IAAKA,EACL6B,MAAOzB,EAAUqD,SAASD,GAC1BjD,WAAY4C,EACZtC,WAAYoC,GAJPO,WAWd,YAAXpE,GACA,cAAC4E,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAAM,EAAvB,SACI,cAACC,EAAA,EAAD,CAAQC,KAAM,QAAd,0BAIO,aAAXhF,GACA,eAAC4E,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAAM,EAAvB,UACI,cAACG,EAAA,EAAD,CAAWC,UAAW,SAAUC,GAAI,IAAK7B,MAAO,QAAS8B,MAAI,EAA7D,SAA+DrF,IAC/D,cAACkD,EAAA,EAAD,CAAQK,MAAO,MAAOD,QAAS,kBAAMM,EAASpE,MAA9C,8B,OCjDpBsC,EAAM8B,SAASpE,KACf8F,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU1D,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ2D,SAASC,eAAe,U,mBCd1BC,EAAOC,QAAU,CAAC,KAAO,oB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,uB","file":"static/js/main.ad749ab7.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: 'https://dog.ceo/api/breeds/image/random',\n    timeout: 10000,\n});\n\nexport interface IDogData {\n    status: string,\n    message: Array<string>;\n}\n\ninterface IDogApi {\n    getRandomDogs: (count?: number) => Promise<IDogData>;\n}\n\nexport const dogApi: IDogApi = {\n    async getRandomDogs (count: number = 50) {\n        try {\n            const response = await axiosInstance.get(`${count}`);\n            return response.data;\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n}","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport {dogApi} from '../dogApi';\nimport {nanoid} from 'nanoid';\n\ninterface IImagesState {\n    status: 'fulfilled' | 'pending' | 'rejected' | null;\n    error: string | null;\n    data: {[key: string]: string};\n}\n\nconst initialState: IImagesState = {\n    error: null,\n    status: null,\n    data: {},\n}\n\nexport const fetchData = createAsyncThunk(\n    'imagesSlice/fetchData',\n    async (arg?: number) => {\n        return await dogApi.getRandomDogs(arg);\n    });\n\nexport const imagesSlice = createSlice({\n    name: 'imagesSlice',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchData.pending, ((state) => {\n            state.status = 'pending';\n            }))\n            .addCase(fetchData.rejected, (state, {error}) => {\n                state.status = 'rejected';\n                state.error = error.message || 'Something went wrong :(';\n            })\n            .addCase(fetchData.fulfilled, (state, {payload}) => {\n                state.status = 'fulfilled';\n                payload.message.forEach(src => state.data[nanoid()] = src);\n                state.error = null;\n            })\n    }\n})\n\nexport default imagesSlice.reducer;","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\ninterface IAppState {\n    onlyFavorites: boolean;\n    favorites: Array<string>;\n    deleted: Array<string>;\n}\n\nconst initialState: IAppState =  {\n    onlyFavorites: false,\n    favorites: [],\n    deleted: [],\n}\n\nexport const appSlice = createSlice({\n    name: 'appSlice',\n    initialState,\n    reducers: {\n        toggleFavorites (state) {\n            state.onlyFavorites = !state.onlyFavorites\n        },\n        toggleLike (state, {payload}: PayloadAction<string>) {\n            const index = state.favorites.indexOf(payload);\n            if (index === -1) {\n                state.favorites.push(payload);\n            }\n            else {\n                state.favorites.splice(index, 1);\n                if (!state.favorites.length) {\n                    state.onlyFavorites = false;\n                }\n            }\n        },\n        deleteItem ({favorites, deleted}, {payload}: PayloadAction<string>) {\n            deleted.push(payload);\n            favorites = favorites.filter(id => id !== payload);\n        },\n    }\n});\n\nexport const {deleteItem, toggleFavorites, toggleLike} = appSlice.actions\nexport default appSlice.reducer","import { configureStore} from '@reduxjs/toolkit';\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\nimport imageReducer from './imagesSlice';\nimport appReducer from './appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    images: imageReducer,\n    app: appReducer,\n  },\n});\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from 'react';\nimport styles from './index.module.scss';\nimport {Button, Card as UICard, Icon} from 'semantic-ui-react';\n\ninterface IProps {\n    id: string;\n    src: string;\n    liked: boolean;\n    toggleLike: (id: string) => void;\n    deleteItem: (id: string) => void;\n}\n\nconst Card: React.FC<IProps> = React.memo(({src, toggleLike, deleteItem, liked, id}) => {\n    return (\n        <UICard className={styles.main}>\n            <img\n                src={src}\n                loading={'lazy'}\n                alt={'random dog'}\n                className={styles.image}\n            />\n            <UICard.Content>\n                <Button.Group fluid>\n                    <Button animated='vertical' onClick={() => toggleLike(id)} color={liked ? 'pink' : 'grey'}>\n                        <Button.Content hidden>Like</Button.Content>\n                        <Button.Content visible>\n                            <Icon name='like' />\n                        </Button.Content>\n                    </Button>\n                    <Button animated='vertical' onClick={() => deleteItem(id)}>\n                        <Button.Content hidden>Delete</Button.Content>\n                        <Button.Content visible>\n                            <Icon name='trash alternate' />\n                        </Button.Content>\n                    </Button>\n                </Button.Group>\n            </UICard.Content>\n        </UICard>\n    );\n});\n\nexport default Card;","import React, {useCallback, useMemo} from 'react';\nimport styles from './index.module.scss';\nimport {useAppDispatch, useAppSelector} from '../../redux/store';\nimport Card from '../Card';\nimport {deleteItem, toggleFavorites, toggleLike} from '../../redux/appSlice';\nimport {Container, Button, Card as UICard, Loader, Dimmer} from 'semantic-ui-react';\nimport {fetchData} from '../../redux/imagesSlice';\n\nconst App = () => {\n    const dispatch = useAppDispatch();\n    const {status, data, error} = useAppSelector((state) => state.images);\n    const {favorites, deleted, onlyFavorites} = useAppSelector(state => state.app);\n    const deleteHandler = useCallback((id: string) => dispatch(deleteItem(id)), [dispatch]);\n    const likeHandler = useCallback((id: string) => dispatch(toggleLike(id)), [dispatch]);\n    const filteredItems = useMemo(() => Object.entries(data)\n        .filter(([key]) => !deleted.includes(key) && (!onlyFavorites || favorites.includes(key))),\n        [data, favorites, deleted, onlyFavorites]);\n\n    return (\n        <div className={styles.main}>\n            {\n                status === 'fulfilled' &&\n                <>\n                    <Button\n                        disabled={!favorites.length}\n                        className={styles.button}\n                        color={onlyFavorites ? 'pink': 'blue'}\n                        onClick={() => dispatch(toggleFavorites())}>\n                        {\n                            onlyFavorites ? 'Favorites' : 'All'\n                        }\n                    </Button>\n                    <UICard.Group stackable doubling centered>\n                        {\n                            filteredItems.map(([key, src]) =>\n                                <Card\n                                    id={key}\n                                    key={key}\n                                    src={src}\n                                    liked={favorites.includes(key)}\n                                    toggleLike={likeHandler}\n                                    deleteItem={deleteHandler}\n                                />)\n                        }\n                    </UICard.Group>\n                </>\n            }\n            {\n                status === 'pending' &&\n                <Dimmer inverted active>\n                    <Loader size={'large'}>Loading...</Loader>\n                </Dimmer>\n            }\n            {\n                status === 'rejected' &&\n                <Dimmer inverted active>\n                    <Container textAlign={'center'} as={'p'} color={'black'} text>{error}</Container>\n                    <Button color={'red'} onClick={() => dispatch(fetchData())}>Try again</Button>\n                </Dimmer>\n            }\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport 'semantic-ui-css/semantic.min.css'\nimport {fetchData} from './redux/imagesSlice';\n\nstore.dispatch(fetchData());\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__9tVZ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Card_main__33rS4\",\"image\":\"Card_image__r8xvI\"};"],"sourceRoot":""}